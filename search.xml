<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Deepin 解决 idea 中文乱码</title>
      <link href="/2019/02/27/linux/deepin-jie-jue-idea-zhong-wen-luan-ma/"/>
      <url>/2019/02/27/linux/deepin-jie-jue-idea-zhong-wen-luan-ma/</url>
      
        <content type="html"><![CDATA[<p>在 deepin 系统上使用 Idea 上插件出现中文乱码的问题</p><p>解决方案：</p><p>从 Windows/Fonts/ 下复制一个支持中文的字体，也可前往 fontpalace 下载字体</p><p>我用的是 SimSun 字体</p><p>SimSun：<a href="https://www.fontpalace.com/search.php?q=simsun" target="_blank" rel="noopener">下载地址</a></p><p>复制字体到指定目录，执行以下命令</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建存放 SimSun 字体的目录</span><span class="token function">sudo</span> <span class="token function">mkdir</span> /usr/share/fonts/truetype/simsun<span class="token comment" spellcheck="true"># 复制</span><span class="token function">sudo</span> <span class="token function">cp</span> simsun.ttf  /usr/share/fonts/truetype/simsun<span class="token comment" spellcheck="true"># fc-cache 扫描字体目录并生成字体信息的缓存,然后应用程序就可以立即使用这些新安装的字体</span>fc-cache -f -v</code></pre><p>Idea 打开设置 Appearance 勾选 Use custom font 选择 SimSun 即可</p><p><img src="http://posts.staticfile.runlua.com/67280d97f04b1af8a9e57b258f66750ce26b8112d7a825c9293c6f5361c86cbf8b3915e280eb3dd82d4f36d8ba701391.png" alt="01"></p><p><img src="http://posts.staticfile.runlua.com/67280d97f04b1af8a9e57b258f66750ce26b8112d7a825c9293c6f5361c86cbf774bcda2557362a2832ff9bf4e454c9a.png" alt="02"></p><p>🖖</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deepin </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npx 使用教程</title>
      <link href="/2019/02/26/javascript/npx-shi-yong-jiao-cheng/"/>
      <url>/2019/02/26/javascript/npx-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<p>npm 从 5.2 版开始，增加了 npx 命令。它有很多用处，本文介绍该命令的主要使用场景。</p><p><img src="http://posts.staticfile.runlua.com/ad89d4b3daeb43a8987c9525501e18539a75eff914bafd471559b61facfbbeeb7867b36175c4601732d984cf397e09c6747912b2f46f75c8dfc17bee79c7dd23.jpg" alt="bg2019020901"></p><p>Node 自带 npm 模块，所以可以直接使用 npx 命令。万一不能用，就要手动安装一下。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g npx</code></pre><h2 id="调用项目安装的模块"><a href="#调用项目安装的模块" class="headerlink" title="调用项目安装的模块"></a>调用项目安装的模块</h2><p>npx 想要解决的主要问题，就是调用项目内部安装的模块。比如，项目内部安装了测试工具 <a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html" target="_blank" rel="noopener">Mocha</a>。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -D mocha</code></pre><p>一般来说，调用 Mocha ，只能在项目脚本和 package.json 的 <code>scripts</code> 字段里面， 如果想在命令行下调用，必须像下面这样。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 项目的根目录下执行</span>$ node-modules/.bin/mocha --version</code></pre><p>npx 就是想解决这个问题，让项目内部安装的模块用起来更方便，只要像下面这样调用就行了。</p><pre class=" language-bash"><code class="language-bash">$ npx mocha --version</code></pre><p>npx 的原理很简单，就是运行的时候，会到 <code>node_modules/.bin</code> 路径和环境变量 <code>$PATH</code> 里面，检查命令是否存在。</p><p>由于 npx 会检查环境变量 <code>$PATH</code>，所以系统命令也可以调用。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 等同于 ls</span>$ npx <span class="token function">ls</span></code></pre><p>注意，Bash 内置的命令不在 <code>$PATH</code> 里面，所以不能用。比如，<code>cd</code> 是 Bash 命令，因此就不能用 <code>npx cd</code>。</p><h2 id="避免全局安装模块"><a href="#避免全局安装模块" class="headerlink" title="避免全局安装模块"></a>避免全局安装模块</h2><p>除了调用项目内部模块，npx 还能避免全局安装的模块。比如，create-react-app 这个模块是全局安装，npx 可以运行它，而且不进行全局安装。</p><pre class=" language-bash"><code class="language-bash">$ npx create-react-app my-react-app</code></pre><p>上面代码运行时，npx 将 <code>create-react-app</code> 下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载 <code>create-react-app</code>。</p><p>下载全局模块时，npx 允许指定版本。</p><pre class=" language-bash"><code class="language-bash">$ npx uglify-js@3.1.0 main.js -o ./dist/main.js</code></pre><p>上面代码指定使用 3.1.0 版本的 <code>uglify-js</code> 压缩脚本。</p><p>注意，只要 npx 后面的模块无法在本地发现，就会下载同名模块。比如，本地没有安装 <code>http-server</code> 模块，下面的命令会自动下载该模块，在当前目录启动一个 Web 服务。</p><pre class=" language-bash"><code class="language-bash">$ npx http-server</code></pre><h2 id="–no-install-参数和–ignore-existing-参数"><a href="#–no-install-参数和–ignore-existing-参数" class="headerlink" title="–no-install 参数和–ignore-existing 参数"></a>–no-install 参数和–ignore-existing 参数</h2><p>如果想让 npx 强制使用本地模块，不下载远程模块，可以使用 <code>--no-install</code> 参数。如果本地不存在该模块，就会报错。</p><pre class=" language-bash"><code class="language-bash">$ npx --no-install http-server</code></pre><p>反过来，如果忽略本地的同名模块，强制安装使用远程模块，可以使用 <code>--ignore-existing</code> 参数。比如，本地已经全局安装了 <code>create-react-app</code>，但还是想使用远程模块，就用这个参数。</p><pre class=" language-bash"><code class="language-bash">$ npx --ignore-existing create-react-app my-react-app</code></pre><h2 id="使用不同版本的-node"><a href="#使用不同版本的-node" class="headerlink" title="使用不同版本的 node"></a>使用不同版本的 node</h2><p>利用 npx 可以下载模块这个特点，可以指定某个版本的 Node 运行脚本。它的窍门就是使用 npm 的 <a href="https://www.npmjs.com/package/node" target="_blank" rel="noopener">node 模块</a>。</p><pre class=" language-bash"><code class="language-bash">$ npx node@0.12.8 -vv0.12.8</code></pre><p>上面命令会使用 0.12.8 版本的 Node 执行脚本。原理是从 npm 下载这个版本的 node，使用后再删掉。</p><p>某些场景下，这个方法用来切换 Node 版本，要比 nvm 那样的版本管理器方便一些。</p><h2 id="p-参数"><a href="#p-参数" class="headerlink" title="-p 参数"></a>-p 参数</h2><p><code>-p</code> 参数用于指定 npx 所要安装的模块，所以上一节的命令可以写成下面这样。</p><pre class=" language-bash"><code class="language-bash">$ npx -p node@0.12.8 node -vv0.12.8</code></pre><p>上面命令先指定安装 <a href="mailto:`node@0.12.8" target="_blank" rel="noopener">`node@0.12.8</a><code>，然后再执行</code>node -v` 命令。</p><p><code>-p</code> 参数对于需要安装多个模块的场景很有用。</p><pre class=" language-bash"><code class="language-bash">$ npx -p lolcatjs -p cowsay <span class="token punctuation">[</span>command<span class="token punctuation">]</span></code></pre><h2 id="c-参数"><a href="#c-参数" class="headerlink" title="-c 参数"></a>-c 参数</h2><p>如果 npx 安装多个模块，默认情况下，所执行的命令之中，只有第一个可执行项会使用 npx 安装的模块，后面的可执行项还是会交给 Shell 解释。</p><pre class=" language-bash"><code class="language-bash">$ npx -p lolcatjs -p cowsay <span class="token string">'cowsay hello | lolcatjs'</span><span class="token comment" spellcheck="true"># 报错</span></code></pre><p>上面代码中，<code>cowsay hello | lolcatjs</code> 执行时会报错，原因是第一项 <code>cowsay</code> 由 npx 解释，而第二项命令 <code>localcatjs</code> 由 Shell 解释，但是 <code>lolcatjs</code> 并没有全局安装，所以报错。</p><p><code>-c</code> 参数可以将所有命令都用 npx 解释。有了它，下面代码就可以正常执行了。</p><pre class=" language-bash"><code class="language-bash">$ npx -p lolcatjs -p cowsay -c <span class="token string">'cowsay hello | lolcatjs'</span></code></pre><p><code>-c</code> 参数的另一个作用，是将环境变量带入所要执行的命令。举例来说，npm 提供当前项目的一些环境变量，可以用下面的命令查看。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> run <span class="token function">env</span> <span class="token operator">|</span> <span class="token function">grep</span> npm_    </code></pre><p><code>-c</code> 参数可以把这些 npm 的环境变量带入 npx 命令。</p><pre class=" language-bash"><code class="language-bash">$ npx -c <span class="token string">'echo "<span class="token variable">$npm_package_name</span>"'</span></code></pre><p>上面代码会输出当前项目的项目名。</p><h2 id="执行-GitHub-源码"><a href="#执行-GitHub-源码" class="headerlink" title="执行 GitHub 源码"></a>执行 GitHub 源码</h2><p>npx 还可以执行 GitHub 上面的模块源码。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 执行 Gist 代码</span>$ npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32<span class="token comment" spellcheck="true"># 执行仓库代码</span>$ npx github:piuccio/cowsay hello</code></pre><p>注意，远程代码必须是一个模块，即必须包含 <code>package.json</code> 和入口脚本。</p><p>参考链接</p><ul><li><a href="https://www.npmjs.com/package/npx" target="_blank" rel="noopener">npx</a></li><li><a href="https://alligator.io/workflow/npx/" target="_blank" rel="noopener">Speed Up Your npm Workflow With npx</a></li><li><a href="https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b" target="_blank" rel="noopener">Introducing npx: an npm package runner</a></li></ul><p>（完）</p><p><strong>文章转自 <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a> 的 <a href="http://www.ruanyifeng.com/blog/2019/02/npx.html" target="_blank" rel="noopener">npx 使用教程</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> NPM </tag>
            
            <tag> NPX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 的 this 原理</title>
      <link href="/2019/01/23/javascript/javascript-de-this-yuan-li/"/>
      <url>/2019/01/23/javascript/javascript-de-this-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="一、问题的由来"><a href="#一、问题的由来" class="headerlink" title="一、问题的由来"></a>一、问题的由来</h2><p>学懂 JavaScript 语言，一个标志就是理解下面两种写法，可能有不一样的结果。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> foo <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token comment" spellcheck="true">// 写法一</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 写法二</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>上面代码中，虽然 <code>obj.foo</code> 和 <code>foo</code> 指向同一个函数，但是执行结果可能不一样。请看下面的例子。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  bar<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">var</span> foo <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token number">2</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>这种差异的原因，就在于函数体内部使用了 <code>this</code> 关键字。很多教科书会告诉你，<code>this</code> 指的是函数运行时所在的环境。对于 <code>obj.foo()</code> 来说，<code>foo</code> 运行在 <code>obj</code> 环境，所以 <code>this</code> 指向 <code>obj</code>；对于 <code>foo()</code> 来说，<code>foo</code> 运行在全局环境，所以 <code>this</code> 指向全局环境。所以，两者的运行结果不一样。</p><p>这种解释没错，但是教科书往往不告诉你，为什么会这样？也就是说，函数的运行环境到底是怎么决定的？举例来说，为什么 <code>obj.foo()</code> 就是在 <code>obj</code> 环境执行，而一旦 <code>var foo = obj.foo</code>，<code>foo()</code> 就变成在全局环境执行？</p><p>本文就来解释 JavaScript 这样处理的原理。理解了这一点，你就会彻底理解 <code>this</code> 的作用。</p><h2 id="二、内存的数据结构"><a href="#二、内存的数据结构" class="headerlink" title="二、内存的数据结构"></a>二、内存的数据结构</h2><p>JavaScript 语言之所以有 <code>this</code> 的设计，跟内存里面的数据结构有关系。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span></code></pre><p>上面的代码将一个对象赋值给变量 <code>obj</code>。JavaScript 引擎会先在内存里面，生成一个对象 <code>{ foo: 5 }</code>，然后把这个对象的内存地址赋值给变量 <code>obj</code>。</p><p><img src="http://posts.staticfile.runlua.com/c9101642d3aa3cf215754318f14be122337b012d0b70839106904757c22de617e687e5734b1e49099f0baee609c54788fad2b8c15b2ec9d56d56baa5cac2dd54.png" alt="bg2018061801"></p><p>也就是说，变量 <code>obj</code> 是一个地址（reference）。后面如果要读取 <code>obj.foo</code>，引擎先从 <code>obj</code> 拿到内存地址，然后再从该地址读出原始的对象，返回它的 <code>foo</code> 属性。</p><p>原始的对象以字典结构保存，每一个属性名都对应一个属性描述对象。举例来说，上面例子的 <code>foo</code> 属性，实际上是以下面的形式保存的。</p><p><img src="http://posts.staticfile.runlua.com/c9101642d3aa3cf215754318f14be122337b012d0b70839106904757c22de617e687e5734b1e49099f0baee609c5478801f07626cc855db35b619bbde24431b4.png" alt="bg2018061802"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>writable<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>enumerable<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>configurable<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意，<code>foo</code> 属性的值保存在属性描述对象的 <code>value</code> 属性里面。</p><h2 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h2><p>这样的结构是很清晰的，问题在于属性的值可能是一个函数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给 <code>foo</code> 属性的 <code>value</code> 属性。</p><p><img src="http://posts.staticfile.runlua.com/c9101642d3aa3cf215754318f14be122337b012d0b70839106904757c22de617e687e5734b1e49099f0baee609c54788f1717f20020eea683daab8ddcda3554f.png" alt="bg2018061803"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 函数的地址    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> f<span class="token punctuation">:</span> f <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 单独执行</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// obj 环境执行</span>obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="四、环境变量"><a href="#四、环境变量" class="headerlink" title="四、环境变量"></a>四、环境变量</h2><p>JavaScript 允许在函数体内部，引用当前环境的其他变量。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>上面代码中，函数体里面使用了变量 <code>x</code>。该变量由运行环境提供。</p><p>现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在函数体内部获得当前的运行环境（context）。所以，<code>this</code> 就出现了，它的设计目的就是在函数体内部，指代函数当前的运行环境。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>上面代码中，函数体里面的 <code>this.x</code> 就是指当前运行环境的 <code>x</code>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  f<span class="token punctuation">:</span> f<span class="token punctuation">,</span>  x<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 单独执行</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span><span class="token comment" spellcheck="true">// obj 环境执行</span>obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>上面代码中，函数 <code>f</code> 在全局环境执行，<code>this.x</code> 指向全局环境的 <code>x</code>。</p><p><img src="http://posts.staticfile.runlua.com/c9101642d3aa3cf215754318f14be122337b012d0b70839106904757c22de617e687e5734b1e49099f0baee609c54788825881b3b6cf201e1908ec20027901c6.png" alt="bg2018061804"></p><p>在 <code>obj</code> 环境执行，<code>this.x</code> 指向 <code>obj.x</code>。</p><p><img src="http://posts.staticfile.runlua.com/c9101642d3aa3cf215754318f14be122337b012d0b70839106904757c22de617e687e5734b1e49099f0baee609c54788632c28b2e9db2c9dedbd02a0910e913b.png" alt="bg2018061805"></p><p>回到本文开头提出的问题，<code>obj.foo()</code> 是通过 <code>obj</code> 找到 <code>foo</code>，所以就是在 <code>obj</code> 环境执行。一旦 <code>var foo = obj.foo</code>，变量 <code>foo</code> 就直接指向函数本身，所以 <code>foo()</code> 就变成在全局环境执行。</p><p>（完）</p><p><strong>文章转自 <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a> 的 <a href="http://www.ruanyifeng.com/blog/2018/06/javascript-this.html" target="_blank" rel="noopener">JavaScript 的 this 原理</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prettier 的安装使用</title>
      <link href="/2019/01/16/javascript/prettier-de-an-zhuang-shi-yong/"/>
      <url>/2019/01/16/javascript/prettier-de-an-zhuang-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>官方网站 <a href="https://prettier.io/" target="_blank" rel="noopener">https://prettier.io/</a></p><p>Prettier 是一个固定的代码格式化程序。</p><p>它通过解析代码并使用自己的规则重新打印它来强制执行一致的样式，这些规则考虑了最大行长度，并在必要时包装代码。</p><p><strong>Opinionated Code Formatter</strong></p><ul><li>JavaScript · TypeScript · Flow · JSX · JSON</li><li>CSS · SCSS · Less</li><li>HTML · Vue · Angular</li><li>GraphQL · Markdown · YAML</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>初始化 npm</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> init -y</code></pre><p>安装 prettier</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i prettier -D</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>新建一个测试文件</p><p>test.js</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span></code></pre><p>右键点击<code>Reformat with Prettier</code></p><p>之后发现 Prettier 增加了一空行，添加了分号，将单引号修改为了双引号</p><p>这就格式化了你的代码</p><p>当然这些可以自定义规则</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>Idea: <code>Ctrl+Alt+Shift+P</code></p><p>VSCode: <code>Ctrl+Shift+I</code></p><h2 id="自定义格式化"><a href="#自定义格式化" class="headerlink" title="自定义格式化"></a>自定义格式化</h2><p>新建 .prettierrc 配置文件</p><p>.prettierrc</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"semi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p>在你修改 .prettierrc 配置文件时</p><p>编辑器会询问你是否使用这个格式应用这个项目中</p><p>Use code style based on Prettier for this project?</p><p>选择 Yes</p><p>一般配置文件中也就写这两个配置选项</p><ul><li>不需要分号</li><li>单引号模式</li></ul><p>更多配置信息</p><p>前往官网查看 <a href="https://prettier.io/docs/en/configuration.html" target="_blank" rel="noopener">https://prettier.io/docs/en/configuration.html</a></p><p>🖖</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Prettier </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 环境搭建</title>
      <link href="/2019/01/12/php/php-huan-jing-da-jian/"/>
      <url>/2019/01/12/php/php-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h2><p>Debian / Ubuntu:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> php</code></pre><p>通知查看版本号来验证是否安装成功</p><pre class=" language-bash"><code class="language-bash">php -v</code></pre><h2 id="安装-Composer"><a href="#安装-Composer" class="headerlink" title="安装 Composer"></a>安装 Composer</h2><p>将安装程序下载到当前目录</p><pre class=" language-bash"><code class="language-bash">php -r <span class="token string">"copy('https://getcomposer.org/installer', 'composer-setup.php');"</span></code></pre><p>验证安装程序 SHA-384</p><pre class=" language-bash"><code class="language-bash">php -r <span class="token string">"if (hash_file('sha384', 'composer-setup.php') === '48e3236262b34d30969dca3c37281b3b4bbe3221bda826ac6a9a62d6444cdb0dcd0615698a5cbe587c3f0fe57a54d8f5') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"</span></code></pre><p>运行安装程序</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> php composer-setup.php --install-dir<span class="token operator">=</span>/usr/local/bin<span class="token function">sudo</span> <span class="token function">mv</span> /usr/local/bin/composer.phar /usr/local/bin/composer</code></pre><p>删除安装程序</p><pre class=" language-bash"><code class="language-bash">php -r <span class="token string">"unlink('composer-setup.php');"</span></code></pre><p>通知查看版本号来验证是否安装成功</p><pre class=" language-bash"><code class="language-bash">composer -v</code></pre><p>设置国内镜像</p><pre class=" language-bash"><code class="language-bash">composer config -g repo.packagist composer https://packagist.phpcomposer.com</code></pre><p>🖖</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Gogs 搭建 Git 服务</title>
      <link href="/2019/01/10/linux/shi-yong-gogs-da-jian-git-fu-wu/"/>
      <url>/2019/01/10/linux/shi-yong-gogs-da-jian-git-fu-wu/</url>
      
        <content type="html"><![CDATA[<p>官方网站 <a href="https://gogs.io/" target="_blank" rel="noopener">https://gogs.io/</a></p><p>Gogs 一款极易搭建的自助 <code>Git Server</code></p><p>国人采用 Go 语言开发</p><p>项目开源地址 <a href="https://github.com/gogs/gogs/" target="_blank" rel="noopener">https://github.com/gogs/gogs/</a></p><p>文档 <a href="https://gogs.io/docs" target="_blank" rel="noopener">https://gogs.io/docs</a></p><p>特点：</p><ul><li>易安装</li><li>跨平台</li><li>轻量级</li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>公司内部的 Git 服务器，就可以使用 Gogs 搭建</li><li>学校的 Git 服务器，部署在内网</li><li>个人可以使用 Gogs 搭建自己的私有 Git 服务器</li></ul><p>以下我使用 Gogs 搭建 Git Server 的过程</p><p>服务器是阿里的学生机 1核2G 系统是 <code>Ubuntu 18 64位</code></p><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul><li>Git</li><li>MySQL 5.7</li></ul><p>更多环境要求前往官网查看 <a href="https://gogs.io/docs/installation" target="_blank" rel="noopener">https://gogs.io/docs/installation</a></p><h2 id="选择版本"><a href="#选择版本" class="headerlink" title="选择版本"></a>选择版本</h2><p><img src="http://posts.staticfile.runlua.com/f05a8974297c84468f0517dec9b4e8f8f8b8e3b46453ac1b62631b60381c56f8c0e091b2ab5ee273da2f59ff8797da06.png" alt="01"></p><p><strong>查看服务器版本信息</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /proc/version</code></pre><p><img src="http://posts.staticfile.runlua.com/f05a8974297c84468f0517dec9b4e8f8f8b8e3b46453ac1b62631b60381c56f8070a2972d4927817c59f8e05fb4e2ff8.png" alt="02"></p><p>我的服务器是<code>amd64</code>类型的</p><p>所以我选择<code>amd64</code>的安装包，且通过二进制安装</p><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p>下载的方式有很多</p><p>可以直接到官网下载</p><p>也可以到到 <code>Github</code> 下载 <a href="https://github.com/gogs/gogs/releases" target="_blank" rel="noopener">https://github.com/gogs/gogs/releases</a></p><p>还可以使用 <code>wget</code> 直接下载到服务器上（推荐）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://cdn.gogs.io/0.11.79/gogs_0.11.79_linux_amd64.tar.gz</code></pre><p><img src="http://posts.staticfile.runlua.com/f05a8974297c84468f0517dec9b4e8f8f8b8e3b46453ac1b62631b60381c56f8bb112bcafb4432e8cef992049125b594.png" alt="03"></p><p>如果下载速度慢可以在本地下载之后上传至服务器</p><h2 id="启动安装程序"><a href="#启动安装程序" class="headerlink" title="启动安装程序"></a>启动安装程序</h2><p>先通过解压命令将安装包解压</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -xzvf linux_amd64.tar.gz</code></pre><p>再执行 <code>./gogs web</code> 启动（服务器需要开放 3000 端口）</p><pre><code>cd gogs./gogs web</code></pre><p><img src="http://posts.staticfile.runlua.com/f05a8974297c84468f0517dec9b4e8f8f8b8e3b46453ac1b62631b60381c56f84391926c10b252a92a2a24917e12acde.png" alt="04"></p><p>这样就启动了安装程序</p><p>通过服务器的 IP 的 3000 端口访问</p><p>如果访问不了，可能就是没有开放 3000 端口的原因</p><h2 id="首次运行安装程序"><a href="#首次运行安装程序" class="headerlink" title="首次运行安装程序"></a>首次运行安装程序</h2><p>接下来就是一些配置</p><p><img src="http://posts.staticfile.runlua.com/f05a8974297c84468f0517dec9b4e8f8f8b8e3b46453ac1b62631b60381c56f8299c7951b6132b3228e73ccb88d82a56.png" alt="05"></p><p><img src="http://posts.staticfile.runlua.com/f05a8974297c84468f0517dec9b4e8f8f8b8e3b46453ac1b62631b60381c56f8eaf14fc7e65890b4796d9bb491e8f3d6.png" alt="06"></p><h2 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h2><p><img src="http://posts.staticfile.runlua.com/f05a8974297c84468f0517dec9b4e8f8f8b8e3b46453ac1b62631b60381c56f88fbc03e9eeb4df77274a4b0c14e9a7da.png" alt="07"></p><p>整个的 Gogs 的安装就完成了</p><p>如果需要配置更多的信息</p><p>查看配置文件手册 <a href="https://gogs.io/docs/advanced/configuration_cheat_sheet" target="_blank" rel="noopener">https://gogs.io/docs/advanced/configuration_cheat_sheet</a></p><h2 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h2><p>启动 Gogs 服务时是将它在前台运行</p><p>当我断开 ssh 时，Gogs 也就会停止</p><p>我就应该把它丢到后台，且我断开 ssh 也不会停止</p><p>使用 nohup （不挂断地运行命令）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">nohup</span> ./gogs web <span class="token operator">></span> gogs.out 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span></code></pre><p>重定向到标准输出到 gogs.out （Gogs 有 log 日志记录，这个东西无所谓）</p><p><img src="http://posts.staticfile.runlua.com/f05a8974297c84468f0517dec9b4e8f8f8b8e3b46453ac1b62631b60381c56f8f5ce4d007fef60c1bf4c6f5bd2099856.png" alt="08"></p><h2 id="关闭-Gogs"><a href="#关闭-Gogs" class="headerlink" title="关闭 Gogs"></a>关闭 Gogs</h2><p>搜索 Gogs 进程</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">grep</span> gogs</code></pre><p>关闭进程</p><p>kill 就是给某个进程 id 发送了一个信号</p><p>默认发送的信号是 <code>SIGTERM</code>，可以被阻塞</p><p>而 kill -9 发送的信号是 <code>SIGKILL</code>（让程序友好的退出）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">kill</span> -9 pid</code></pre><p><img src="http://posts.staticfile.runlua.com/f05a8974297c84468f0517dec9b4e8f8f8b8e3b46453ac1b62631b60381c56f8cba2221dfc9826c6a14aa8ccde3466c5.png" alt="09"></p><p>🖖</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Gogs </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 反向代理 Gogs</title>
      <link href="/2019/01/10/linux/nginx-fan-xiang-dai-li-gogs/"/>
      <url>/2019/01/10/linux/nginx-fan-xiang-dai-li-gogs/</url>
      
        <content type="html"><![CDATA[<h2 id="反向代理用途"><a href="#反向代理用途" class="headerlink" title="反向代理用途"></a>反向代理用途</h2><p>每次访问都使用 IP 地址加端口号 未免有点麻烦</p><p>可以绑定一个域名来访问 Gogs</p><p>以下是我绑定一个二级域名，再通过 Nginx 反向代理服务器 Gogs 服务的整个过程</p><h2 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h2><p>添加域名解析至服务器 IP 地址</p><p><img src="http://posts.staticfile.runlua.com/ba51fab0b786a684b3b18ee002f2eaad03f637aef540ca640987734d54edba234ad752aa385eb20464392cdd1c9ca5ab.png" alt="01"></p><h2 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h2><p>gogs.runlua.com.conf</p><pre><code>server{    listen 80;    server_name gogs.runlua.com;    location /{        proxy_pass http://127.0.0.1:3000;    }    access_log  /www/wwwlogs/gogs.runlua.com.log;    error_log  /www/wwwlogs/gogs.runlua.com.error.log;}</code></pre><p><img src="http://posts.staticfile.runlua.com/ba51fab0b786a684b3b18ee002f2eaad03f637aef540ca640987734d54edba2317a5de6a6e40593d806a67be4d603ef3.png" alt="02"></p><h2 id="Gogs-配置"><a href="#Gogs-配置" class="headerlink" title="Gogs 配置"></a>Gogs 配置</h2><p>custom/conf/app.ini</p><pre><code>[server]DOMAIN           = gogs.runlua.comHTTP_PORT        = 3000ROOT_URL         = http://gogs.runlua.com/DISABLE_SSH      = falseSSH_PORT         = 22START_SSH_SERVER = falseOFFLINE_MODE     = false</code></pre><p><img src="http://posts.staticfile.runlua.com/ba51fab0b786a684b3b18ee002f2eaad03f637aef540ca640987734d54edba23ad21e16cdb43a78a7187e0dee36a9847.png" alt="03"></p><h2 id="重新启动服务"><a href="#重新启动服务" class="headerlink" title="重新启动服务"></a>重新启动服务</h2><p>通过域名正常访问</p><p><img src="http://posts.staticfile.runlua.com/ba51fab0b786a684b3b18ee002f2eaad03f637aef540ca640987734d54edba235970f9aa08abbf86c497125b471bcf6c.png" alt="04"></p><p>仓库的 Git 链接也是域名的方式了</p><p><img src="http://posts.staticfile.runlua.com/ba51fab0b786a684b3b18ee002f2eaad03f637aef540ca640987734d54edba2338793481e2abe826da865c6c081a15f8.png" alt="05"></p><h2 id="关闭-3000-端口（可选操作）"><a href="#关闭-3000-端口（可选操作）" class="headerlink" title="关闭 3000 端口（可选操作）"></a>关闭 3000 端口（可选操作）</h2><p>因为现在访问都是可以通过域名访问</p><p>我通过 gogs.runlua.com 访问我的服务器</p><p>Nginx 监听 80 端口，将请求反向代理给 127.0.0.1:3000</p><p>Gogs 监听 3000 端口来处理请求</p><p>服务器和客户端之间没有通过 3000 端口进行操作</p><p>所以可以将 3000 端口取消开放</p><p>🖖</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gogs </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 查看已经安装的软件</title>
      <link href="/2019/01/09/linux/ubuntu-cha-kan-yi-jing-an-zhuang-de-ruan-jian/"/>
      <url>/2019/01/09/linux/ubuntu-cha-kan-yi-jing-an-zhuang-de-ruan-jian/</url>
      
        <content type="html"><![CDATA[<p>查找已安装的软件</p><pre class=" language-bash"><code class="language-bash">apt list --installed<span class="token comment" spellcheck="true"># or</span>dpkg -l</code></pre><p>查看某款软件是否安装</p><blockquote><p>通过管道命令来查询</p></blockquote><pre class=" language-bash"><code class="language-bash">dpkg -l <span class="token operator">|</span> <span class="token function">grep</span> xxx</code></pre><p>🖖</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 高级总结</title>
      <link href="/2019/01/05/javascript/javascript-gao-ji-zong-jie/"/>
      <url>/2019/01/05/javascript/javascript-gao-ji-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-高级知识点"><a href="#JavaScript-高级知识点" class="headerlink" title="JavaScript 高级知识点"></a>JavaScript 高级知识点</h2><p>官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript</a></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul><li>Java 和 JavaScript 什么关系？</li><li>ES6 听说过吗？和 JavaScript 什么关系？ES2015 听说过吗？都是什么关系？</li><li>如何把变量转成数字？转成布尔？转成字符串？</li><li>使用 Number() 和 parseInt 转数字时的区别？</li><li>var 和 let 干什么用的？什么区别？</li><li>在一个函数中，如果定义变量时没有添加 var 会出现什么情况？</li><li>什么是内存泄漏？</li><li>什么是块级作用域？如何定义块级作用域的变量？</li><li>什么是运算符短路？有什么用？</li><li>说出 JS 中你用过的数据类型？</li><li>编写一个使用 let 定义变量和使用 var 定义变量不同点的案例。</li><li>for .. in 和 for .. of 的区别？用途？</li><li>forEach 的用途？</li><li>请问 arguments 是干什么用的？它代表什么？</li><li>什么是匿名函数？应用场景？</li><li>this 代表什么？</li><li>什么是箭头函数？有什么用途？this 在箭头函数和普通函数中的区别是什么？</li><li>call 和 apply 的功能是什么？有什么区别？</li><li>如何开启严格模式？请说出至少一个严格模式与普通模式的区别？</li><li>什么是闭包？闭包有什么特点？有什么用？</li><li>什么是垃圾回收机制？</li><li>什么是内存泄漏？在什么情况下会出现内存泄漏？</li><li>什么是 OOP？OOP 的三大特性？什么是多态？</li><li>什么是原型链？对象如何访问原型对象？构造函数如何访问原型对象？</li><li>什么是构造函数？在 JS 中如何基于原型(prototype)实现面向对象？</li><li>ES6 中的 OOP 中 super 是干什么用的？ES6 中的继承需要注意什么？</li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><img src="http://posts.staticfile.runlua.com/09bf097296d7167c98fba37898371d762a8837c433af470cfb3ba7d84bcbb141818e68a0b3a4d469adf43e7b9cfc4d0d.png" alt="01"></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><img src="http://posts.staticfile.runlua.com/09bf097296d7167c98fba37898371d762a8837c433af470cfb3ba7d84bcbb141e3185fd5df94476c0997756836ffe5cd.png" alt="02"></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="转数字"><a href="#转数字" class="headerlink" title="转数字"></a>转数字</h3><p><code>parseInt</code>：如果前几个字符是数字可以转成数字</p><p><code>Number</code>：将整体转成数字</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token string">'123abc'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// NaN (Not a Number)</span></code></pre><h3 id="转字符串"><a href="#转字符串" class="headerlink" title="转字符串"></a>转字符串</h3><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">'100abc'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 200100abc</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">''</span> <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">'100abc'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 100100100abc</span></code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>定义变量：<code>var</code> 和 <code>let</code></p><p>定义常量：<code>const</code></p><p><code>var</code> 可以定义局部变量和全局变量</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token comment" spellcheck="true">// 全局变量</span><span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> age <span class="token comment" spellcheck="true">// 局部变量</span><span class="token punctuation">}</span></code></pre><blockquote><p>意外的全局变量</p><p>如果在函数中定义变量时没有写 <code>var</code> 或者 <code>let</code> 那么变量会变成全局变量</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  age <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">// 全局变量</span><span class="token punctuation">}</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span></code></pre><p><code>let</code> 可以定义块级变量、局部变量和全局变量</p><p><code>let</code> 可以定义块级变量（只在大括号中生效的变量）</p><p>示例 1：<code>let</code> 和 <code>var</code> 的区别</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span></code></pre><p>示例 2：使用 <code>var</code> 时无论，调用数组中第几个函数，输出的结果都是 10</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> funs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  funs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>funs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//10</span>funs<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//10</span>funs<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//10</span></code></pre><p>使用 <code>let</code> 时的效果：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> funs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  funs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>funs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span>funs<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4</span>funs<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><h2 id="短路运算符"><a href="#短路运算符" class="headerlink" title="短路运算符"></a>短路运算符</h2><p>我们可以使用 <code>&amp;&amp;</code> 和 <code>||</code> 实现短路操作</p><p><code>&amp;&amp;</code>： 连接多个语句，当语句 1 为真是执行语句 2</p><p><code>||</code>：连接多个语句，当语句 1 为假时执行语句 2</p><p>可以用短路运算符来实现一些简写，比如，有时我们获取到一个变量，不知道它的值是什么，但我们希望无论如何它都是一个数字，至少是个 0，我们就可以写：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 如果 a 是假就得到0</span><span class="token keyword">var</span> a <span class="token operator">=</span> a <span class="token operator">||</span> <span class="token number">0</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 如果 o 存在就调用 o.name</span>o <span class="token operator">&amp;&amp;</span> o<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p><img src="http://posts.staticfile.runlua.com/09bf097296d7167c98fba37898371d762a8837c433af470cfb3ba7d84bcbb141b6fae21f4172eab9f2a91359825fe65b.png" alt="03"></p><p>除了 <code>while</code>、<code>do...while</code>、<code>for</code> 之外，我们还可以使用：</p><ol><li>在循环数组时，我们可以使用 <code>for...of</code> 、<code>for...in</code>、<code>forEach</code></li><li>循环对象时，我们可以使用 <code>for...in</code></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 循环得到值</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// abcde</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 循环得到下标</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 01234</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 循环得到下标和值</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0a1b2c3d4e</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p>在函数中可以使用 <code>arguments</code> 获取函数在调用时的参数数组</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2 , 获取参数的数量</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// tom ,第一个参数值</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// jack ,第二个参数值</span><span class="token punctuation">}</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">,</span> <span class="token string">'jack'</span><span class="token punctuation">)</span></code></pre><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数可以用来隔绝一段作用域</p><blockquote><p>有时我们需要在一个现有的项目中添加新的代码，这时当我们添加变量、函数时就有可能出现和原来系统中变量名、函数名冲突的情况，为了避免我们的代码和原代码中出现命名冲突的情况，我们就可以把我们的代码放到一个匿名函数中，然后调用这个匿名函数，这样我们所写的代码都只在这个匿名函数内生效，就不会影响其它代码了。</p></blockquote><p>有两种写法，来调用匿名函数得到一段独立的作用域</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这里的代码不影响外面的作用域</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这里的代码不影响外面的作用域</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数是匿名函数的一种简写方式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 普通函数</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 箭头函数</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></code></pre><p>箭头函数和普通函数中的 <code>this</code> 是不同的</p><p><img src="http://posts.staticfile.runlua.com/09bf097296d7167c98fba37898371d762a8837c433af470cfb3ba7d84bcbb141b8d96d89e22dbba2a174b659a309c051.png" alt="04"></p><p>比如以下代码运行的结果是不同的：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 20</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="call-apply"><a href="#call-apply" class="headerlink" title="call/apply"></a>call/apply</h3><p><code>call</code> 和 <code>apply</code> 的功能相同：<code>使一个函数归属于一个对象来调用</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>  age<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 独立调用时 this.age 不存在</span>abc<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10 ， abc 函数归属于 o 这个对象来调用，这时 this.age 指的就是 o 对象中的 age</span></code></pre><p><code>call</code> 和 <code>apply</code> 的区别是参数形式不同：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>  age<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span>abc<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10 ， 20 对应 a, b 两个参数</span>abc<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [10, 20] 数组中的对应 a,b 两个参数</span></code></pre><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p><img src="http://posts.staticfile.runlua.com/09bf097296d7167c98fba37898371d762a8837c433af470cfb3ba7d84bcbb1419605be129c38fdb8a80e4e68fcc592e5.png" alt="05"></p><p>以下代码在严格模式下会报错：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span> <span class="token comment" spellcheck="true">// 严格模式</span><span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  age <span class="token operator">=</span> <span class="token string">'tom'</span> <span class="token comment" spellcheck="true">// 报错</span><span class="token punctuation">}</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p><img src="http://posts.staticfile.runlua.com/09bf097296d7167c98fba37898371d762a8837c433af470cfb3ba7d84bcbb141a783eeadde353a7c7cbff4c0e001e144.png" alt="06"></p><blockquote><p>以下代码就是一个闭包，它制作了一个 id 变量，这个变量不会马上销毁，会一直存在，并且不能被外部随意修改，只能通过闭包内修改。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义闭包</span><span class="token keyword">function</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> id<span class="token operator">++</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取一个自增的ID</span><span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2</span></code></pre><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p><img src="http://posts.staticfile.runlua.com/09bf097296d7167c98fba37898371d762a8837c433af470cfb3ba7d84bcbb1416e9fc7aac74c5ef7016932ec223ec853.png" alt="07"></p><h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><p>当 DOM 对象和 JS 对象互相引用时，会导致两个对象在该销毁时都无法销毁。</p><p>比如下面的 el 和 o 这两个对象都是局部变量，在函数执行之后就应该销毁，但因为两个对象互相引用，所以导致函数执行之后也无法销毁</p><p><img src="http://posts.staticfile.runlua.com/09bf097296d7167c98fba37898371d762a8837c433af470cfb3ba7d84bcbb141013904417661327e58e50ef9a9cf423a.png" alt="08"></p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>原型链：所有的对象都会继承自一个原型对象，这个原型对象又会继承自一个原型对象，一层一层直到最顶层继承自 <code>null</code>，这样的链就是原型链</p><p>构造函数：生成对象的函数</p><h3 id="访问原型对象"><a href="#访问原型对象" class="headerlink" title="访问原型对象"></a>访问原型对象</h3><p>对象中通过 <code>__proto__</code> 访问原型对象</p><p>构造函数中通过 <code>prototype</code> 访问原型对象</p><p><img src="http://posts.staticfile.runlua.com/09bf097296d7167c98fba37898371d762a8837c433af470cfb3ba7d84bcbb141faff9d363dc6070496c5505d084c8cd1.png" alt="09"></p><h3 id="基于原型链的面向对象"><a href="#基于原型链的面向对象" class="headerlink" title="基于原型链的面向对象"></a>基于原型链的面向对象</h3><p>JavaScript 在实现面向对象编程时传统的方法是基于 <code>原型链</code> + <code>构造函数</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义一个类</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在原型对象上添加方法</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>setName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 生成对象</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// tom</span></code></pre><p>JavaScript 中实现面向对象编程的原则：</p><ol><li>属性定义到构造函数中</li><li>方法定义到原型对象上（避免每个对象都拷贝一份函数）</li></ol><h2 id="ECMAScript-6-中的面向对象"><a href="#ECMAScript-6-中的面向对象" class="headerlink" title="ECMAScript 6 中的面向对象"></a>ECMAScript 6 中的面向对象</h2><p>ECMAScript 6 中提供了 <code>class</code> 可以实现面向对象</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 构造函数</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token punctuation">}</span>  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name  <span class="token punctuation">}</span>  <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// tom</span></code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>在原型统的 JavaScript 中我们使用原型对象实现继承，在 ECMAScript 6 中我们可以使用 <code>extends</code> 实现类的继承</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 构造函数</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token punctuation">}</span>  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name  <span class="token punctuation">}</span>  <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承自 Person</span><span class="token keyword">class</span> <span class="token class-name">Boy</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>在继承时，如果子类中定义了构造函数，那么在构造函数中必须要调用 <code>super</code> 方法来调用父类的构造函数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 构造函数</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token punctuation">}</span>  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name  <span class="token punctuation">}</span>  <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承自 Person</span><span class="token keyword">class</span> <span class="token class-name">Boy</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用父类的构造函数</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>摘抄于老师的讲义</strong></p><p>🖖</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM 中的事件</title>
      <link href="/2019/01/03/javascript/dom-zhong-de-shi-jian/"/>
      <url>/2019/01/03/javascript/dom-zhong-de-shi-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="1-如何绑定、解绑事件？"><a href="#1-如何绑定、解绑事件？" class="headerlink" title="1. 如何绑定、解绑事件？"></a>1. 如何绑定、解绑事件？</h2><p>DOM0 的事件机制（只会在冒泡阶段执行，无法在捕获阶段执行）</p><pre class=" language-javascript"><code class="language-javascript">元素<span class="token punctuation">.</span>on事件名 <span class="token operator">=</span> 回调函数</code></pre><p>比如：</p><pre class=" language-javascript"><code class="language-javascript">obj<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// DOM0 事件机制不能绑定多个函数，所以下面的会覆盖掉上面的</span></code></pre><p>DOM2 的事件机制（官方觉得 DOM0 功能太少，所以添加了一个功能更强大的事件机制）</p><pre class=" language-javascript"><code class="language-javascript">元素<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'事件名'</span><span class="token punctuation">,</span> 回调函数<span class="token punctuation">,</span> 是否在捕获阶段触发（默认<span class="token boolean">false</span>）<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 移除绑定事件</span>绑定函数元素<span class="token punctuation">.</span>removeEventListener</code></pre><p>比如：</p><pre class=" language-javascript"><code class="language-javascript">obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>DOM2 比 DOM0 好在哪？</p><p>a. 同一个事件，可以绑定多个回调函数</p><p>b. 可以通过第三个参数，让事件在冒泡或者捕获阶段执行</p><p>c. 还提供了一个绑定的函数</p><h2 id="2-事件的阶段：什么是冒泡？什么是捕获？"><a href="#2-事件的阶段：什么是冒泡？什么是捕获？" class="headerlink" title="2. 事件的阶段：什么是冒泡？什么是捕获？"></a>2. 事件的阶段：什么是冒泡？什么是捕获？</h2><p>事件在执行时分为两个阶段：冒泡 和 捕获</p><p>冒泡： 从里层元素向外层元素依次触发事件</p><p>捕获：从外层元素向里层元素依次触发事件</p><p>注意：DOM0 只支持冒泡</p><h2 id="3-什么是事件对象？干什么用的？"><a href="#3-什么是事件对象？干什么用的？" class="headerlink" title="3. 什么是事件对象？干什么用的？"></a>3. 什么是事件对象？干什么用的？</h2><p>事件会被绑定到一个函数上，这个函数我们可以添加一个参数。而这个参数就叫做事件对象。</p><p>事件对象中包含这个事件在触发时的相关信息 比如：鼠标在事件触发时的位置，点击键盘是哪个键子等</p><pre class=" language-javascript"><code class="language-javascript">obj<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>🖖</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 响应式原理</title>
      <link href="/2018/12/29/javascript/vue-xiang-ying-shi-yuan-li/"/>
      <url>/2018/12/29/javascript/vue-xiang-ying-shi-yuan-li/</url>
      
        <content type="html"><![CDATA[<p>现在是时候深入一下了！Vue 最独特的特性之一，是其非侵入性的响应式系统。数据模型仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新。这使得状态管理非常简单直接，不过理解其工作原理同样重要，这样你可以回避一些常见的问题。在这个章节，我们将进入一些 Vue 响应式系统的底层的细节。</p><h2 id="如何追踪变化"><a href="#如何追踪变化" class="headerlink" title="如何追踪变化"></a>如何追踪变化</h2><p>当你把一个普通的 JavaScript 对象传给 Vue 实例的 <code>data</code> 选项，Vue 将遍历此对象所有的属性，并使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">Object.defineProperty</a> 把这些属性全部转为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects#定义_getters_与_setters" target="_blank" rel="noopener">getter/setter</a>。Object.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是为什么 Vue 不支持 IE8 以及更低版本浏览器。</p><p>这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。这里需要注意的问题是浏览器控制台在打印数据对象时 getter/setter 的格式化并不同，所以你可能需要安装 <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">vue-devtools</a> 来获取更加友好的检查接口。</p><p>每个组件实例都有相应的 <strong>watcher</strong> 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 <code>setter</code> 被调用时，会通知 <code>watcher</code> 重新计算，从而致使它关联的组件得以更新。</p><p><img src="http://posts.staticfile.runlua.com/16a79fbee1db847b987f0af66a22183ab34ec658072cce0aa7ca31eb168a5c49253a9ed66901eec5b1c40f090c0bfdf61fdd032960fea03fae86af42eaf3f6e7.png" alt="data"></p><h2 id="检测变化的注意事项"><a href="#检测变化的注意事项" class="headerlink" title="检测变化的注意事项"></a>检测变化的注意事项</h2><p>受现代 JavaScript 的限制 (而且 <code>Object.observe</code> 也已经被废弃)，Vue <strong>不能检测到对象属性的添加或删除</strong>。由于 Vue 会在初始化实例时对属性执行 <code>getter/setter</code> 转化过程，所以属性必须在 <code>data</code> 对象上存在才能让 Vue 转换它，这样才能让它是响应的。例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// `vm.a` 是响应的</span>vm<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">// `vm.b` 是非响应的</span></code></pre><p>Vue 不允许在已经创建的实例上动态添加新的根级响应式属性 (root-level reactive property)。然而它可以使用 <code>Vue.set(object, key, value)</code> 方法将响应属性添加到嵌套的对象上：</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>someObject<span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>您还可以使用 <code>vm.$set</code> 实例方法，这也是全局 <code>Vue.set</code> 方法的别名：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>someObject<span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>有时你想向一个已有对象添加多个属性，例如使用 <code>Object.assign()</code> 或 <code>_.extend()</code> 方法来添加属性。但是，这样添加到对象上的新属性不会触发更新。在这种情况下可以创建一个新的对象，让它包含原对象的属性和新的属性：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 代替 `Object.assign(this.someObject, { a: 1, b: 2 })`</span><span class="token keyword">this</span><span class="token punctuation">.</span>someObject <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>someObject<span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>也有一些数组相关的问题，之前已经在<a href="list.html#注意事项">列表渲染</a>中讲过。</p><h2 id="声明响应式属性"><a href="#声明响应式属性" class="headerlink" title="声明响应式属性"></a>声明响应式属性</h2><p>由于 Vue 不允许动态添加根级响应式属性，所以你必须在初始化实例前声明根级响应式属性，哪怕只是一个空值：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明 message 为一个空值字符串</span>    message<span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{ message }}&lt;/div>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 之后设置 `message`</span>vm<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'Hello!'</span></code></pre><p>如果你未在 data 选项中声明 <code>message</code>，Vue 将警告你渲染函数正在试图访问的属性不存在。</p><p>这样的限制在背后是有其技术原因的，它消除了在依赖项跟踪系统中的一类边界情况，也使 Vue 实例在类型检查系统的帮助下运行的更高效。而且在代码可维护性方面也有一点重要的考虑：<code>data</code> 对象就像组件状态的概要，提前声明所有的响应式属性，可以让组件代码在以后重新阅读或其他开发人员阅读时更易于被理解。</p><h2 id="异步更新队列"><a href="#异步更新队列" class="headerlink" title="异步更新队列"></a>异步更新队列</h2><p>可能你还没有注意到，Vue <strong>异步</strong>执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部尝试对异步队列使用原生的 <code>Promise.then</code> 和 <code>MessageChannel</code>，如果执行环境不支持，会采用 <code>setTimeout(fn, 0)</code> 代替。</p><p>例如，当你设置 <code>vm.someData = &#39;new value&#39;</code> ，该组件不会立即重新渲染。当刷新队列时，组件会在事件循环队列清空时的下一个“tick”更新。多数情况我们不需要关心这个过程，但是如果你想在 DOM 状态更新后做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员沿着“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们确实要这么做。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 <code>Vue.nextTick(callback)</code> 。这样回调函数在 DOM 更新完成后就会调用。例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#example'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">'123'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>vm<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'new message'</span> <span class="token comment" spellcheck="true">// 更改数据</span>vm<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>textContent <span class="token operator">===</span> <span class="token string">'new message'</span> <span class="token comment" spellcheck="true">// false</span>Vue<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  vm<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>textContent <span class="token operator">===</span> <span class="token string">'new message'</span> <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在组件内使用 <code>vm.$nextTick()</code> 实例方法特别方便，因为它不需要全局 <code>Vue</code> ，并且回调函数中的 <code>this</code> 将自动绑定到当前的 Vue 实例上：</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;span>{{ message }}&lt;/span>'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">'没有更新'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    updateMessage<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'更新完成'</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => '没有更新'</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => '更新完成'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>因为 <code>$nextTick()</code> 返回一个 Promise 对象，所以你可以使用新的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">ES2016 async/await</a> 语法完成相同的事情：</p><pre class=" language-javascript"><code class="language-javascript">  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    updateMessage<span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'updated'</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => '未更新'</span>      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => '已更新'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue.js</a></li></ul><p>🖖</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 图片懒加载</title>
      <link href="/2018/12/20/javascript/vue-tu-pian-lan-jia-zai/"/>
      <url>/2018/12/20/javascript/vue-tu-pian-lan-jia-zai/</url>
      
        <content type="html"><![CDATA[<p>如何在 Vue 项目中使用图片懒加载</p><p>可以使用一个叫 <code>vue-lazyload</code> 的包来实现</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vue-lazyload --save</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>main.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> VueLazyload <span class="token keyword">from</span> <span class="token string">'vue-lazyload'</span><span class="token comment" spellcheck="true">// 直接使用</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueLazyload<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// // 或者加一些选项</span><span class="token comment" spellcheck="true">// Vue.use(VueLazyload, {</span><span class="token comment" spellcheck="true">//   // 预加载高度的比例</span><span class="token comment" spellcheck="true">//   preLoad: 1.3,</span><span class="token comment" spellcheck="true">//   // 加载失败后图像的src</span><span class="token comment" spellcheck="true">//   error: 'dist/error.png',</span><span class="token comment" spellcheck="true">//   // 加载图片时的图片</span><span class="token comment" spellcheck="true">//   loading: 'dist/loading.gif'</span><span class="token comment" spellcheck="true">// })</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    App  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>template</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(v, k) in images<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-lazy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>v.src<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>就是如此简单实现图片懒加载</p><h2 id="更多官方-API-和-实例"><a href="#更多官方-API-和-实例" class="headerlink" title="更多官方 API 和 实例"></a>更多官方 API 和 实例</h2><p>use <code>v-lazy-container</code> work with raw HTML</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-lazy-container</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ selector: <span class="token punctuation">'</span>img<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//domain.com/img1.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//domain.com/img2.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//domain.com/img3.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>custom <code>error</code> and <code>loading</code> placeholder image</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">v-lazy-container</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ selector: <span class="token punctuation">'</span>img<span class="token punctuation">'</span>, error: <span class="token punctuation">'</span>xxx.jpg<span class="token punctuation">'</span>, loading: <span class="token punctuation">'</span>xxx.jpg<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//domain.com/img1.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//domain.com/img2.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//domain.com/img3.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-lazy-container</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ selector: <span class="token punctuation">'</span>img<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//domain.com/img1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">data-error</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//domain.com/img2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">data-loading</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//domain.com/img3.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="Constructor-Options"><a href="#Constructor-Options" class="headerlink" title="Constructor Options"></a>Constructor Options</h2><table><thead><tr><th style="text-align:left">key</th><th>description</th><th>default</th><th>options</th></tr></thead><tbody><tr><td style="text-align:left"><code>preLoad</code></td><td>预载高度比例</td><td><code>1.3</code></td><td><code>Number</code></td></tr><tr><td style="text-align:left"><code>error</code></td><td>加载失败时图像的地址</td><td><code>&#39;data-src&#39;</code></td><td><code>String</code></td></tr><tr><td style="text-align:left"><code>loading</code></td><td>加载时图像的地址</td><td><code>&#39;data-src&#39;</code></td><td><code>String</code></td></tr><tr><td style="text-align:left"><code>attempt</code></td><td>尝试次数</td><td><code>3</code></td><td><code>Number</code></td></tr><tr><td style="text-align:left"><code>listenEvents</code></td><td>监听的事件</td><td><code>[&#39;scroll&#39;, &#39;wheel&#39;, &#39;mousewheel&#39;, &#39;resize&#39;, &#39;animationend&#39;, &#39;transitionend&#39;, &#39;touchmove&#39;]</code></td><td><a href="#desired-listen-events">Desired Listen Events</a></td></tr><tr><td style="text-align:left"><code>adapter</code></td><td>动态修改元素的属性</td><td><code>{ }</code></td><td><a href="#element-adapter">Element Adapter</a></td></tr><tr><td style="text-align:left"><code>filter</code></td><td>图像的侦听器筛选器</td><td><code>{ }</code></td><td><a href="#image-listener-filter">Image listener filter</a></td></tr><tr><td style="text-align:left"><code>lazyComponent</code></td><td>lazyload component</td><td><code>false</code></td><td><a href="#lazy-component">Lazy Component</a></td></tr><tr><td style="text-align:left"><code>dispatchEvent</code></td><td>触发 DOM 事件</td><td><code>false</code></td><td><code>Boolean</code></td></tr><tr><td style="text-align:left"><code>throttleWait</code></td><td>等待事件</td><td><code>200</code></td><td><code>Number</code></td></tr><tr><td style="text-align:left"><code>observer</code></td><td>使用 observer</td><td><code>false</code></td><td><code>Boolean</code></td></tr><tr><td style="text-align:left"><code>observerOptions</code></td><td>observer 设置</td><td>{ rootMargin: ‘0px’, threshold: 0.1 }</td><td><a href="#intersectionobserver">IntersectionObserver</a></td></tr><tr><td style="text-align:left"><code>silent</code></td><td>不输出调试信息</td><td><code>true</code></td><td><code>Boolean</code></td></tr></tbody></table><h3 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h3><p>您可以通过传入数组来配置您想要 <code>Vue Lazyload</code> 监听的事件。</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueLazyload<span class="token punctuation">,</span> <span class="token punctuation">{</span>  preLoad<span class="token punctuation">:</span> <span class="token number">1.3</span><span class="token punctuation">,</span>  error<span class="token punctuation">:</span> <span class="token string">'dist/error.png'</span><span class="token punctuation">,</span>  loading<span class="token punctuation">:</span> <span class="token string">'dist/loading.gif'</span><span class="token punctuation">,</span>  attempt<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// the default is ['scroll', 'wheel', 'mousewheel', 'resize', 'animationend', 'transitionend']</span>  listenEvents<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'scroll'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="Lazy-Component"><a href="#Lazy-Component" class="headerlink" title="Lazy Component"></a>Lazy Component</h3><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueLazyload<span class="token punctuation">,</span> <span class="token punctuation">{</span>  lazyComponent<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lazy-component</span> <span class="token attr-name">@show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handler<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini-cover<span class="token punctuation">"</span></span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img.src<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lazy-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token punctuation">{</span>    <span class="token operator">...</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      handler <span class="token punctuation">(</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this component is showing'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>参考链接</p><ul><li><a href="https://www.npmjs.com/package/vue-lazyload" target="_blank" rel="noopener">vue-lazyload</a></li></ul><p>🖖</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
            <tag> vue-lazyload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 配置主从复制</title>
      <link href="/2018/12/15/mysql/mysql-pei-zhi-zhu-cong-fu-zhi/"/>
      <url>/2018/12/15/mysql/mysql-pei-zhi-zhu-cong-fu-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>用到的软件：</p><p><code>Docker</code> + <code>haproxy</code>（负载均衡）+ <code>MySQL</code></p><p><img src="http://posts.staticfile.runlua.com/7fa6de1679229758327027277bd4c6204c89ddcc4fef3c7105645c522fe6a30d659a6ae16762338bf83eeed73d5568a2.png" alt="01"></p><h2 id="启动三台-MySQL-服务器"><a href="#启动三台-MySQL-服务器" class="headerlink" title="启动三台 MySQL 服务器"></a>启动三台 MySQL 服务器</h2><p>拉取 MySQL 镜像：</p><pre class=" language-bash"><code class="language-bash">docker pull mysql:5.7.24</code></pre><p>启动三个容器，并同时修改它们的 MySQL 配置文件，修改配置文件中的四项：</p><ol><li>–server-id ：设置一个唯一的 id（正整数就行，集群中 id 不能重复）</li><li>–log-bin：启动二进制日志并设置二进制日志文件的名字</li><li>–character-set-server：设置编码</li><li>–collation-server：设置校验规则</li></ol><pre class=" language-bash"><code class="language-bash">docker run --name mysql13306 -d -p 13306:3306  -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123123 mysql:5.7.24 --server-id<span class="token operator">=</span>1 --log-bin<span class="token operator">=</span>mysql-bin --character-set-server<span class="token operator">=</span>utf8mb4 --collation-server<span class="token operator">=</span>utf8mb4_unicode_cidocker run --name mysql13307 --link mysql13306:mysqlmaster -d -p 13307:3306  -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123123 mysql:5.7.24 --server-id<span class="token operator">=</span>2 --log-bin<span class="token operator">=</span>mysql-bin --character-set-server<span class="token operator">=</span>utf8mb4 --collation-server<span class="token operator">=</span>utf8mb4_unicode_cidocker run --name mysql13308 --link mysql13306:mysqlmaster -d -p 13308:3306  -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123123 mysql:5.7.24 --server-id<span class="token operator">=</span>3 --log-bin<span class="token operator">=</span>mysql-bin --character-set-server<span class="token operator">=</span>utf8mb4 --collation-server<span class="token operator">=</span>utf8mb4_unicode_ci</code></pre><h2 id="设置主服务器"><a href="#设置主服务器" class="headerlink" title="设置主服务器"></a>设置主服务器</h2><p>创建好服务器之后，我们需要首先连接主服务器并做以下设置：</p><p>1、创建复制用的账号</p><p>我们需要在主服务器上创建一个账号，然后从服务器就可以使用这个账号连接到主服务器并读取二进制文件实现数据同步。</p><p>在主服务器上执行以下 SQL 语句</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">replication</span> slave <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'slave'</span>@'<span class="token operator">%</span><span class="token string">' IDENTIFIED BY '</span><span class="token number">111111</span>'<span class="token punctuation">;</span></code></pre><p>2、查看主服务器状态</p><p>创建好账号之后，我们还需要查看一下当前主服务器上二进制日志的状态，在后面配置从服务器时需要使用。</p><p>执行以下 SQL 语句查看：</p><pre class=" language-bash"><code class="language-bash">show master status</code></pre><p>得到结果：</p><p><img src="http://posts.staticfile.runlua.com/7fa6de1679229758327027277bd4c6204c89ddcc4fef3c7105645c522fe6a30d7b8c38e5b302fb1ba2b0c7b54707379d.png" alt="02"></p><p>注意 ： 得到这两个值之后，不要再对主服务器有任何 SQL 的写操作（否则这两个值还会变）直到从服务器配置成功。</p><p>到此主服务器配置完成，接下来我们需要配置两个从服务器。</p><h2 id="设置从服务器"><a href="#设置从服务器" class="headerlink" title="设置从服务器"></a>设置从服务器</h2><p>在两个从服务器上执行以下三条 SQL 语句：</p><pre class=" language-sql"><code class="language-sql">stop slave<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true"># 先停止复制功能</span><span class="token comment" spellcheck="true"># 设置主服务器IP、账号、密码、二日志状态</span>change master <span class="token keyword">to</span>    master_host<span class="token operator">=</span><span class="token string">"mysqlmaster"</span><span class="token punctuation">,</span>    master_user<span class="token operator">=</span><span class="token string">"slave"</span><span class="token punctuation">,</span>    master_password<span class="token operator">=</span><span class="token string">"111111"</span><span class="token punctuation">,</span>    master_log_file<span class="token operator">=</span><span class="token string">"mysql-bin.000003"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 这个值修改为前面主服务器的 File 值</span>    master_log_pos<span class="token operator">=</span><span class="token number">154</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true"># 这个值修改为前面主服务器的 Position 值</span><span class="token comment" spellcheck="true"># 启动复制功能</span><span class="token keyword">start</span> slave<span class="token punctuation">;</span></code></pre><h2 id="查看主从状态"><a href="#查看主从状态" class="headerlink" title="查看主从状态"></a>查看主从状态</h2><p>到此已经配置成功了，我们需要在两个从服务器上执行以下 SQL 查看是否成功</p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">show</span> slave <span class="token keyword">status</span><span class="token punctuation">;</span></code></pre><p>成功时以下两项都为 Yes ：</p><p><img src="http://posts.staticfile.runlua.com/7fa6de1679229758327027277bd4c6204c89ddcc4fef3c7105645c522fe6a30d4c91b5ae72b5d542c1fd7bb3d5cb6129.png" alt="03"></p><p>到此就配置完成了，现在我们向主服务器上的所有写操作都会自动同步到从服务器上。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>配置完之后，在主服务器上新建数据库</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> test_master_slave</code></pre><p>然后到两个从服务器上查看会发现同样都有这个数据库：</p><p><img src="http://posts.staticfile.runlua.com/7fa6de1679229758327027277bd4c6204c89ddcc4fef3c7105645c522fe6a30dd2381c9c48bd11eb3e75b0c725424cc6.png" alt="04"></p><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>接下来我们需要安装并配置一个负载均衡服务器，对两台从服务器进行请求的转发。</p><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>首先我们要下载 haproxy 的镜像：</p><pre class=" language-bash"><code class="language-bash">docker pull haproxy:1.5.19-alpine</code></pre><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>创建负载均衡容器</p><pre class=" language-bash"><code class="language-bash">docker run --name haproxy -d -p 13333:3306 --link mysql13307:mysql1 --link mysql13308:mysql2 haproxy:1.5.19-alpine</code></pre><p>创建之后，发现该容器无法启动，这是因为我们还没有为它编写好配置文件，所以我们需要编写负载均衡配置文件。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>先在本机中创建一个配置文件，文件名为 haproxy.cfg 。</p><p>1、编写配置文件</p><p>haproxy.cfg</p><pre><code>globaldaemonnbproc 1pidfile /usr/local/haproxy/conf/haproxy.piddefaultsmode tcpretries 2option redispatchoption abortonclosemaxconn 4096listen test1bind 0.0.0.0:3306         # 监听的端口号mode tcp                  # 负载均衡时使用的协议  tcp(数据库)     http(web服务器)server s1 mysql1:3306     # 配置后端要转发服务器server s2 mysql2:3306</code></pre><p>2、复制配置文件到容器中</p><p>编写好配置文件之后，我们需要把配置文件复制到容器中：</p><pre class=" language-bash"><code class="language-bash">docker <span class="token function">cp</span> 本地路径/haproxy.cfg  haproxy:/usr/local/etc/haproxy/haproxy.cfg</code></pre><p>3、启动容器</p><p>有了配置文件之后，我们就可以启动负载均衡的容器了。</p><pre class=" language-bash"><code class="language-bash">docker start haproxy</code></pre><p>现在就可以通过 <code>127.0.0.1:13333</code> 端口连接负载均衡了。</p><h1 id="Laravel-中配置主从"><a href="#Laravel-中配置主从" class="headerlink" title="Laravel 中配置主从"></a>Laravel 中配置主从</h1><p>接下来，我们将京西商城的 api 接口项目和数据库集群结合实现程序上的 <code>读、写分离</code>。</p><p>1、导入商城数据库</p><p>在主服务器上创建 jxshop 商城，并将项目中的 jxshop.sql 到主服务器执行一遍以导入商城数据库结构。</p><p>2、修改 Laravel 中的配置文件</p><p>在 mysql 中添加 read 和 write 两个数组，在这两个数组中分别设置读、写服务器的账号信息，相同的配置项可以写到数组的外面。</p><p>config/database.php</p><pre class=" language-php"><code class="language-php"><span class="token string">'mysql'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>    <span class="token string">'read'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token string">'port'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'13307'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'write'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token string">'port'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'13306'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'driver'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>    <span class="token string">'host'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'DB_HOST'</span><span class="token punctuation">,</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 'port' => env('DB_PORT', '3306'),</span>    <span class="token string">'database'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'DB_DATABASE'</span><span class="token punctuation">,</span> <span class="token string">'forge'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'username'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'DB_USERNAME'</span><span class="token punctuation">,</span> <span class="token string">'forge'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'password'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">123123</span><span class="token punctuation">,</span>    <span class="token string">'unix_socket'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'DB_SOCKET'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'charset'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'utf8mb4'</span><span class="token punctuation">,</span>    <span class="token string">'collation'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'utf8mb4_unicode_ci'</span><span class="token punctuation">,</span>    <span class="token string">'prefix'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'prefix_indexes'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">'strict'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">'engine'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><p><strong>摘抄于老师的讲义</strong></p><p>🖖</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> MySQL </tag>
            
            <tag> HAProxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 深度监听</title>
      <link href="/2018/12/07/javascript/vue-shen-du-jian-ting/"/>
      <url>/2018/12/07/javascript/vue-shen-du-jian-ting/</url>
      
        <content type="html"><![CDATA[<p>Vue 中 <code>watch</code> 可以用来监听某个数据</p><pre class=" language-javascript"><code class="language-javascript">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果 `question` 发生改变，这个函数就会运行</span>  question<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newQuestion<span class="token punctuation">,</span> oldQuestion<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>answer <span class="token operator">=</span> <span class="token string">'Waiting for you to stop typing...'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">debouncedGetAnswer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>但是如果我想监听一个数组里面的对象，<code>watch</code> 默认的浅度监听就不好使了，这个时候就需要使用深度监听</strong></p><h2 id="使用深度监听"><a href="#使用深度监听" class="headerlink" title="使用深度监听"></a>使用深度监听</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 深度 watcher</span>c<span class="token punctuation">:</span> <span class="token punctuation">{</span>  handler<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  deep<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p>例如：</p><pre class=" language-javascript"><code class="language-javascript">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>  list<span class="token punctuation">:</span> <span class="token punctuation">{</span>    handle<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    deep<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以下是 Vue 官方给出的 <code>watch</code> 完整 <code>api</code></p><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>类型：<code>{ [key: string]: string | Function | Object | Array }</code></p><p>详细：</p><p>一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 <code>$watch()</code>，遍历 watch 对象的每一个属性。</p><p>示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    d<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    e<span class="token punctuation">:</span> <span class="token punctuation">{</span>      f<span class="token punctuation">:</span> <span class="token punctuation">{</span>        g<span class="token punctuation">:</span> <span class="token number">5</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'new: %s, old: %s'</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 方法名</span>    b<span class="token punctuation">:</span> <span class="token string">'someMethod'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 深度 watcher</span>    c<span class="token punctuation">:</span> <span class="token punctuation">{</span>      handler<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* ... */</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      deep<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 该回调将会在侦听开始之后被立即调用</span>    d<span class="token punctuation">:</span> <span class="token punctuation">{</span>      handler<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* ... */</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      immediate<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    e<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">'handle1'</span><span class="token punctuation">,</span>      <span class="token keyword">function</span> <span class="token function">handle2</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* ... */</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        handler<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">handle3</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/* ... */</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* ... */</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// watch vm.e.f's value: {g: 5}</span>    <span class="token string">'e.f'</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* ... */</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>vm<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">// => new: 2, old: 1</span></code></pre><blockquote><p>注意，不应该使用箭头函数来定义 watcher 函数 (例如 <code>searchQuery: newValue =&gt; this.updateAutocomplete(newValue))</code>。理由是箭头函数绑定了父级作用域的上下文，所以 <code>this</code> 将不会按照期望指向 Vue 实例，<code>this.updateAutocomplete</code> 将是 undefined。</p></blockquote><p>参考链接</p><ul><li><a href="https://cn.vuejs.org/v2/api/#watch" target="_blank" rel="noopener">API - Vue.js</a></li></ul><p>🖖</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js 环境搭建</title>
      <link href="/2018/11/28/javascript/node.js-huan-jing-da-jian/"/>
      <url>/2018/11/28/javascript/node.js-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>Debian / Ubuntu:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> nodejs</code></pre><p>通过查看版本号来验证 Node.js 是否安装成功</p><pre class=" language-bash"><code class="language-bash">node -v</code></pre><h2 id="安装-NPM"><a href="#安装-NPM" class="headerlink" title="安装 NPM"></a>安装 NPM</h2><p>查看当前镜像地址</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> get registry</code></pre><p>设置镜像地址</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry http://registry.npm.taobao.org/</code></pre><h2 id="版本升级"><a href="#版本升级" class="headerlink" title="版本升级"></a>版本升级</h2><p>NPM 版本升级</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g <span class="token function">npm</span></code></pre><p>Node.js 版本升级</p><blockquote><p>通过 n 模块来进行更新</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g n</code></pre><p>安装最新 LTS 版本</p><pre class=" language-bash"><code class="language-bash">n stable</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 环境搭建</title>
      <link href="/2018/11/28/docker/docker-huan-jing-da-jian/"/>
      <url>/2018/11/28/docker/docker-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 linux 机器上，也可以实现虚拟化</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口</p><blockquote><p>较旧版本的 <code>docker</code> 被称为 <code>docker</code> 或 <code>docker-engine</code></p><p>新版的 <code>docker</code> 分成了两种 <code>Docker CE</code>（社区版） 和 <code>Docker EE</code>（企业版）</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>更新 <code>apt</code> 包</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update</code></pre><p>允许 <code>apt</code> 通过 HTTPS 使用存储库</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> \  apt-transport-https \  ca-certificates \  curl \  software-properties-common</code></pre><p>添加 <code>docker</code> 的官方 <code>GPG</code> 密钥</p><pre class=" language-bash"><code class="language-bash">curl -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key add -</code></pre><blockquote><p>如果是 <code>debian</code> 或 <code>deepin</code>，将上面的地址中 <code>ubuntu</code> 改成 <code>debian</code></p></blockquote><p>查看密匙是否安装成功</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt-key fingerprint 0EBFCD88</code></pre><p>添加 <code>docker</code> 官方仓库</p><pre><code>sudo add-apt-repository \  &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \  $(lsb_release -cs) \  stable&quot;</code></pre><blockquote><p>如果是 <code>debian</code> 或 <code>deepin</code>，将上面的地址中 <code>ubuntu</code> 改成 <code>debian</code></p><p><code>deepin</code> 安装得先获取 <code>debian</code> 的版本号</p><p>查看版本号命令：<code>cat /etc/debian_version</code></p><p>再根据版本号对应的代号替换上面命令的 <code>$(lsb_release -cs)</code></p></blockquote><p>更新 <code>apt</code> 包</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update</code></pre><p>安装 docker-ce</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce</code></pre><p>查看安装版本信息</p><pre class=" language-bash"><code class="language-bash">docker version</code></pre><blockquote><p>更多的安装信息：<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a></p></blockquote><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>旧版的卸载命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove docker docker-engine docker.io containerd runc</code></pre><p>卸载 Docker CE</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> purge docker-ce</code></pre><p>删除残留文件</p><p>主机上的镜像，容器和卷或自定义配置文件不会自动删除</p><p>要删除执行下面命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -rf /var/lib/docker</code></pre><h2 id="更换镜像"><a href="#更换镜像" class="headerlink" title="更换镜像"></a>更换镜像</h2><p><code>docker</code> 官方仓库，速度很慢</p><p>需要更换为国内的镜像源进行加速</p><p>创建配置文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">touch</span> /etc/docker/daemon.json</code></pre><p>编辑配置文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/docker/daemon.json</code></pre><p>daemon.json</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>地址可以换成其他的镜像源地址</p><p>重启 docker</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> docker restart</code></pre><h2 id="Ubuntu-非-root-用户使用-docker"><a href="#Ubuntu-非-root-用户使用-docker" class="headerlink" title="Ubuntu 非 root 用户使用 docker"></a>Ubuntu 非 root 用户使用 docker</h2><p><code>docker</code> 守护进程始终作为根用户运行</p><p>所以其他用户使用 <code>docker</code> 时，每次都要使用 <code>sudo</code></p><p>为了避免在使用 <code>docker</code> 命令时使用 <code>sudo</code></p><p>创建一个名为 <code>docker</code> 的 <code>unix</code> 组并向其中添加用户</p><p>当 <code>docker</code> 守护进程启动时，它使 <code>docker</code> 组对 <code>unix socket</code> 的所有权可读写</p><p>创建 docker 组</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">groupadd</span> docker</code></pre><p>添加用户到 docker 组</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> gpasswd -a <span class="token variable">${USER}</span> docker</code></pre><p>重启 docker</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> docker restart</code></pre><p>注销用户</p><p>将当前用户注销，再次登录即可</p><p>可以是：</p><ul><li>切换用户</li><li>注销用户</li><li>重启</li></ul><p>🖖</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 环境搭建</title>
      <link href="/2018/11/02/java/java-huan-jing-da-jian/"/>
      <url>/2018/11/02/java/java-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Debian / Ubuntu:</p><p><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html" target="_blank" rel="noopener">下载地址</a></p><p>下载 <code>.deb</code> 的软件包，下载完之后安装就行</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>如果不知道 <code>jdk</code> 安装到磁盘哪个位置了，可以搜索一下</p><p>一般在下面这个位置</p><blockquote><p>/usr/lib/jvm/jdk-11.0.2/bin</p></blockquote><p>打开目录</p><p>两个主要程序 <code>java</code> 和 <code>javac</code></p><p>为这两个程序配置系统环境变量</p><pre><code>sudo vi /etc/profile</code></pre><p>在文件中添加一下内容</p><pre class=" language-shell"><code class="language-shell"># 定义一个变量为 `JAVA_PATH`export JAVA_PATH="/usr/lib/jvm/jdk-11.0.2/bin/"# 将其加入到 `PATH` 中export PATH="$JAVA_PATH:$PATH"</code></pre><p>需要注销用户或重启才能生效</p><p>也可以使用 <code>source</code> 命令让其即时生效</p><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile</code></pre><p>通知查看版本号来验证是否安装成功</p><pre class=" language-bash"><code class="language-bash">java -version</code></pre><p>也可以输出系统环境变量来查找</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token variable">$PATH</span></code></pre><p>🖖</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
